### CONFIG
hull:
  config:
    general:
      data:
        endpoints:
          vidicore:
            auth:
              basic:
                adminUserSecretName: "_HT/hull.vidispine.addon.library.secret.name.vidispine.admin.user"
        installation:
          config:
            customCaCertificates: {}
            certificateSecrets: {}
            preScript: ""
            postScript: ""
            productUris: []
            proxy:
              httpProxy: ""
              httpsProxy: ""
              noProxy: ""
            debug:
              ignoreEntityRestCallErrors: false
              retriesForEntityRestCall: 3
              retriesForAuthServiceCall: 10
              debugInstallerScript: false
            legacy:
              defaultServiceAccountIsHook: false
            runtime:
              sourcesFolders: _HT/hull.vidispine.addon.sources.folder.secret.count
          endpoints:
            10_vidicore:
              auth:
                basic:
                  env:
                    username: _HT!{{ printf "%s_%s" (_HT*hull.config.general.data.endpoints.vidicore.auth.basic.adminUserSecretName | replace "-" "_" | upper) "username" }}
                    password: _HT!{{ printf "%s_%s" (_HT*hull.config.general.data.endpoints.vidicore.auth.basic.adminUserSecretName | replace "-" "_" | upper) "password" }}
              endpoint: _HT/hull.vidispine.addon.library.get.endpoint.uri.info:ENDPOINT:"vidicore":URI:"api"
              subresources:
                10_metadatafields:
                  apiPath: "metadata-field"
                  typeDescription: "MetadataField"
                  _DEFAULTS_:
                    register: true
                    putInsteadOfPost: true
                20_metadatafieldgroups:
                  apiPath: "metadata-field/field-group"
                  typeDescription: "MetadataFieldGroup"
                  _DEFAULTS_:
                    register: true
                    putInsteadOfPost: true
                90_itemnotification:
                  apiPath: "item/notification"
                  typeDescription: "ItemNotification"
                  _DEFAULTS_:
                    register: true
                91_collectionnotification:
                  apiPath: "collection/notification"
                  typeDescription: "CollectionNotification"
                  _DEFAULTS_:
                    register: true
                92_jobnotification:
                  apiPath: "job/notification"
                  typeDescription: "JobNotification"
                  _DEFAULTS_:
                    register: true
                93_storagenotification:
                  apiPath: "storage/notification"
                  typeDescription: "StorageNotification"
                  _DEFAULTS_:
                    register: true
                94_storagefilenotification:
                  apiPath: "storage/file/notification"
                  typeDescription: "StorageFileNotification"
                  _DEFAULTS_:
                    register: true
                95_filenotification:
                  apiPath: "file/notification"
                  typeDescription: "FileNotification"
                  _DEFAULTS_:
                    register: true
                96_quotanotification:
                  apiPath: "quota/notification"
                  typeDescription: "QuotaNotification"
                  _DEFAULTS_:
                    register: true
                97_groupnotification:
                  apiPath: "group/notification"
                  typeDescription: "GroupNotification"
                  _DEFAULTS_:
                    register: true
                98_documentnotification:
                  apiPath: "document/notification"
                  typeDescription: "DocumentNotification"
                  _DEFAULTS_:
                    register: true
                99_deletionlocknotification:
                  apiPath: "deletion-lock/notification"
                  typeDescription: "DeletionLockNotification"
                  _DEFAULTS_:
                    register: true
            20_authservice:
              auth:
                token:
                  endpoint: 
                    baseUri: _HT/hull.vidispine.addon.library.get.endpoint.uri.info:ENDPOINT:"authservice":URI:"api"
                    healthCheckSubpath: "/v1/HealthCheck?showDetail=false"
                    requestSubpath: "/connect/token"
                  request:
                    body:
                      client_id: ${env:CLIENT_AUTHSERVICE_INSTALLATION_ID}
                      client_secret: ${env:CLIENT_AUTHSERVICE_INSTALLATION_SECRET}
                      grant_type: client_credentials
                      scope: identityscope
                    headers:
                      Content-Type: "application/x-www-form-urlencoded"
                      Accept: "application/json"
                  response:
                    tokenField: "access_token"
              endpoint: _HT/hull.vidispine.addon.library.get.endpoint.uri.info:ENDPOINT:"authservice":URI:"api"
              subresources:
                10_resources:
                  apiPath: "v1/Resource/ApiScope"
                  typeDescription: "Scope"
                  _DEFAULTS_:
                    register: true
                    putUriExcludeIdentifier: true
                    deleteUriExcludeIdentifier: true
                    deleteQueryParams:
                      name: "$identifier"
                20_clients:
                  apiPath: "v1/Client"
                  typeDescription: "Client"
                  _DEFAULTS_:
                    register: true
                    putUriExcludeIdentifier: true
                    deleteUriExcludeIdentifier: true
                    deleteQueryParams:
                      clientId: "$identifier"
                30_roles:
                  apiPath: "v1/Roles"
                  typeDescription: "Roles"
                  _DEFAULTS_:
                    register: true
                    remove: false
                    putUriExcludeIdentifier: true
                    deleteUriExcludeIdentifier: true
                    deleteQueryParams:
                      roleId: "$identifier"

            30_configportal:
              auth:
                token:
                  endpoint: 
                    baseUri: _HT/hull.vidispine.addon.library.get.endpoint.uri.info:ENDPOINT:"authservice":URI:"api"
                    healthCheckSubpath: "/v1/HealthCheck?showDetail=false"
                    requestSubpath: "/connect/token"
                  request:
                    body:
                      client_id: ${env:CLIENT_CONFIGPORTAL_INSTALLATION_ID}
                      client_secret: ${env:CLIENT_CONFIGPORTAL_INSTALLATION_SECRET}
                      grant_type: client_credentials
                      scope: 'configportalscope'
                    headers:
                      Content-Type: "application/x-www-form-urlencoded"
                      Accept: "application/json"
                  response:
                    tokenField: "access_token"
              endpoint: _HT/hull.vidispine.addon.library.get.endpoint.uri.info:ENDPOINT:"configportal":URI:"api"
              subresources:
                10_product:
                  apiPath: "v2/Products"
                  typeDescription: "Product"
                  _DEFAULTS_:
                    register: true
                    remove: false
                10_products: 
                  apiPath: "v2/Products"
                  typeDescription: "Product"
                  _DEFAULTS_:
                    register: true
                    remove: false
                20_usecasedefinitions:
                  apiPath: "v2/UseCaseDefinitions"
                  typeDescription: "UseCaseDefinitions"
                  _DEFAULTS_:
                    register: true
                    remove: false
                25_migrate:
                  apiPath: "v2/UseCaseDefinitions/Migrate"
                  typeDescription: UseCaseDefinitionsMigrate
                  _DEFAULTS_:
                    register: true
                    remove: false
                30_usecaseconfiguration:
                  apiPath: "v2/UseCaseConfigurations"
                  typeDescription: "UseCaseConfigurations"
                  _DEFAULTS_:
                    register: true
                    remove: false
                30_usecaseconfigurations:
                  apiPath: "v2/UseCaseConfigurations"
                  typeDescription: "UseCaseConfigurations"
                  _DEFAULTS_:
                    register: true
                    remove: false
                40_metadata:
                  apiPath: "v2/Metadata"
                  typeDescription: "Metadata"
                  _DEFAULTS_:
                    register: true
                    remove: false
                45_metadatagroups:
                  apiPath: "v2/MetadataGroup"
                  typeDescription: "MetadataGroup"
                  _DEFAULTS_:
                    register: true
                    remove: false
                50_roles:
                  apiPath: "v2/RoleRightsMapping/Mapping"
                  typeDescription: RoleRightsMapping
                  _DEFAULTS_:
                    register: true
                    remove: false
                60_productcomponents:
                  apiPath: "v2/ProductComponent"
                  typeDescription: ProductComponent
                  _DEFAULTS_:
                    register: false
                    remove: false
                    processNoOp: false
                    getUriExcludeIdentifier: true
                  entities:
                    license:
                      # Declares variables that are available in getCustomScript
                      _helm_charts_: |- 
                        _HT![
                          {
                            name: {{ (index . "$").Chart.Name }},
                            version: _HT!{{ (index . "$").Chart.Version }}
                          }
                        ]
                      _oci_endpoint_: |-
                        _HT!{
                          {{ if (gt (len (keys (default dict (index . "$").Values.hull.objects.registry))) 1) }}
                          {{ range $name, $spec := (index . "$").Values.hull.objects.registry }}
                          {{ if (ne $name "_HULL_OBJECT_TYPE_DEFAULT_") }}
                          server: {{ $spec.server }},
                          username: {{ $spec.username }},
                          password: {{ $spec.password }}
                          {{ end }}
                          {{ end }}
                          {{ end }}
                        }
                      getCustomScriptFromFile: "get-custom-scripts/GetSbomLicense.ps1"
                      config: {}
                70_mappedgroups:
                  apiPath: v2/ActiveDirectoryMappedGroups
                  typeDescription: ActiveDirectoryMappedGroups
                  _DEFAULTS_:
                    register: true
                    remove: false
                80_systemendpoints:
                  apiPath: v2/SystemEndpoints
                  typeDescription: SystemEndpoints
                  _DEFAULTS_:
                    register: true
                    remove: false
                
###################################################

  objects:

    registry:
      _HULL_OBJECT_TYPE_DEFAULT_:
        annotations:
          helm.sh/hook: pre-install,pre-upgrade
          helm.sh/hook-weight: "-90"
          helm.sh/hook-delete-policy: before-hook-creation

    serviceaccount:
      default:
        annotations:
          _HULL_TRANSFORMATION_:
            NAME: hull.util.transformation.tpl
            CONTENT: |- 
              {
                {{ if (index . "$").Values.hull.config.general.data.installation.config.legacy.defaultServiceAccountIsHook }}
                "helm.sh/hook": "pre-install,pre-upgrade",
                "helm.sh/hook-weight": "-100",
                "helm.sh/hook-delete-policy": "before-hook-creation"
                {{ end }}
              }
      hull-install:
        annotations:
          helm.sh/hook: pre-install,pre-upgrade
          helm.sh/hook-weight: "-100"
          helm.sh/hook-delete-policy: before-hook-creation
      hull-configure:
        enabled: false
        annotations:
          helm.sh/hook: post-install,post-upgrade
          helm.sh/hook-weight: "40"
          helm.sh/hook-delete-policy: before-hook-creation
      hull-database:
        enabled: false
        annotations:
          helm.sh/hook: pre-install,pre-upgrade
          helm.sh/hook-weight: "-15"
          helm.sh/hook-delete-policy: before-hook-creation

    clusterrolebinding:
      hull-install-events:
        annotations:
          helm.sh/hook: pre-install,pre-upgrade
          helm.sh/hook-weight: "-15"
          helm.sh/hook-delete-policy: before-hook-creation
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: _HT^events
        subjects:
        - kind: ServiceAccount
          name: _HT^hull-install
          namespace: _HT!{{ (index . "$").Release.Namespace }}
      hull-configure-events:
        annotations:
          helm.sh/hook: pre-install,pre-upgrade
          helm.sh/hook-weight: "-15"
          helm.sh/hook-delete-policy: before-hook-creation
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: _HT^events
        subjects:
        - kind: ServiceAccount
          name: _HT^hull-configure
          namespace: _HT!{{ (index . "$").Release.Namespace }}
    clusterrole:
      events:
        annotations:
          helm.sh/hook: pre-install,pre-upgrade
          helm.sh/hook-weight: "-15"
          helm.sh/hook-delete-policy: before-hook-creation
        rules:
          events:
            apiGroups:
            - ''
            - events.k8s.io
            resources:
            - events
            verbs:
            - create
            - update
            - list
          pods:
            apiGroups:
            - ''
            resources:
            - pods
            verbs:
            - get
            - list
          jobs:
            apiGroups:
            - 'batch'
            - ''
            resources:
            - jobs/status
            verbs:
            - update
            - create

    job:
      hull-install-setup:
        enabled: false
        annotations:
          "helm.sh/hook-delete-policy": before-hook-creation
        pod:
          containers:
            installation:
              command: ["/bin/sh", "-c"]
              volumeMounts: _HT/hull.vidispine.addon.sources.folder.volumemounts
              envFrom:
                auth:
                  secretRef:
                    name: auth
                vidicore:
                  prefix: _HT!{{ printf "%s_" (_HT*hull.config.general.data.endpoints.vidicore.auth.basic.adminUserSecretName | replace "-" "_" | upper) }}
                  secretRef:
                    name: _HT*hull.config.general.data.endpoints.vidicore.auth.basic.adminUserSecretName
                    staticName: true
                    optional: true
              env:
                HTTP_PROXY:
                  enabled: _HT?ne (index . "$").Values.hull.config.general.data.installation.config.proxy.httpProxy ""
                  value: _HT*hull.config.general.data.installation.config.proxy.httpProxy
                HTTPS_PROXY:
                  enabled: _HT?ne (index . "$").Values.hull.config.general.data.installation.config.proxy.httpsProxy ""
                  value: _HT*hull.config.general.data.installation.config.proxy.httpsProxy
                NO_PROXY:
                  enabled: _HT?ne (index . "$").Values.hull.config.general.data.installation.config.proxy.noProxy ""
                  value: _HT*hull.config.general.data.installation.config.proxy.noProxy
          volumes: _HT/hull.vidispine.addon.sources.folder.volumes

      'hull-install':
        sources:
        - _HULL_OBJECT_TYPE_DEFAULT_
        - hull-install-setup
        annotations:
          helm.sh/hook: pre-install,pre-upgrade
          helm.sh/hook-weight: '-10'
        parallelism: 1
        completions: 1
        backoffLimit: 6
        pod:
          restartPolicy: OnFailure
          serviceAccountName: _HT^hull-install
          containers:
            installation:
              image:
                repository: hull/hull-integration
                tag: <HULL-VIDISPINE-ADDON-VERSION>
              args: _HT![
                {{ if (or (index . "$").Values.hull.config.general.data.installation.config.customCaCertificates (index . "$").Values.hull.config.general.data.installation.config.certificateSecrets) }}
                echo Updating Certificates;
                update-ca-certificates;
                {{ end }}
                echo Run hull-install Script;
                pwsh /script/Installer.ps1 -ConfigFilePath /script/installation.yaml -Stage pre-install;
                ]

      'hull-configure':
        sources:
        - _HULL_OBJECT_TYPE_DEFAULT_
        - hull-install-setup
        enabled: false
        annotations:
          helm.sh/hook: post-install,post-upgrade
          helm.sh/hook-weight: '50'
        parallelism: 1
        completions: 1
        backoffLimit: 6
        pod:
          restartPolicy: OnFailure
          serviceAccountName: _HT^hull-configure
          containers:
            installation:
              image:
                repository: hull/hull-integration
                tag: <HULL-VIDISPINE-ADDON-VERSION>
              args: _HT![
                {{ if (or (index . "$").Values.hull.config.general.data.installation.config.customCaCertificates (index . "$").Values.hull.config.general.data.installation.config.certificateSecrets) }}
                echo Updating Certificates;
                update-ca-certificates;
                {{ end }}
                echo Run hull-configure Script;
                pwsh /script/Installer.ps1 -ConfigFilePath /script/installation.yaml -Stage post-install;
                ]
      
      hull-database:
        enabled: false
        annotations:
          helm.sh/hook: pre-install,pre-upgrade
          helm.sh/hook-weight: "-10"
          helm.sh/hook-delete-policy: before-hook-creation
   
    configmap:
      
      hull-database:
        enabled: false
        annotations:
          helm.sh/hook: pre-install,pre-upgrade
          helm.sh/hook-weight: "-15"
          helm.sh/hook-delete-policy: before-hook-creation
    
    secret:

      auth:
        annotations:
          helm.sh/hook: pre-install,pre-upgrade
          helm.sh/hook-weight: "-100"
          helm.sh/hook-delete-policy: before-hook-creation
        data: _HT/hull.vidispine.addon.library.auth.secret.data

      'custom-ca-certificates':
        enabled: _HT?(index . "$").Values.hull.config.general.data.installation.config.customCaCertificates
        annotations:
          helm.sh/hook: pre-install,pre-upgrade
          helm.sh/hook-weight: "-100"
          helm.sh/hook-delete-policy: before-hook-creation
        data: |-
          _HT!{
            {{ range $key,$value :=  (index . "$").Values.hull.config.general.data.installation.config.customCaCertificates }}
            {{ $key }}: { inline: {{ $value | quote }} },
            {{ end }}
          }
      
      'custom-installation-files-setup':
        enabled: false
        annotations:
          helm.sh/hook: pre-install,pre-upgrade
          helm.sh/hook-weight: "-80"
          helm.sh/hook-delete-policy: before-hook-creation
        
      'custom-installation-files':
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: |-
          _HT!{
            {{ range $file, $_ := (index . "$").Files.Glob "files/hull-vidispine-addon/installation/sources/*" }}
            {{ $file | base | quote }}: { path: {{ $file | quote }} },
            {{ end }}
          }
      'custom-installation-files-1':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 1
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:1
      'custom-installation-files-2':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 2
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:2
      'custom-installation-files-3':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 3
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:3
      'custom-installation-files-4':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 4
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:4
      'custom-installation-files-5':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 5
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:5
      'custom-installation-files-6':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 6
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:6
      'custom-installation-files-7':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 7
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:7
      'custom-installation-files-8':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 8
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:8
      'custom-installation-files-9':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 9
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:9
      'custom-installation-files-10':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 10
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:10
      'custom-installation-files-11':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 11
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:11
      'custom-installation-files-12':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 12
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:12
      'custom-installation-files-13':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 13
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:13
      'custom-installation-files-14':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 14
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:14
      'custom-installation-files-15':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 15
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:15
      'custom-installation-files-16':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 16
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:16
      'custom-installation-files-17':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 17
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:17
      'custom-installation-files-18':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 18
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:18
      'custom-installation-files-19':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 19
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:19
      'custom-installation-files-20':
        enabled: _HT?ge (int (index . "$").Values.hull.config.general.data.installation.config.runtime.sourcesFolders) 20
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data: _HT/hull.vidispine.addon.sources.folder.secret:FOLDER_INDEX:20
      hull-database:
        enabled: false
        annotations:
          helm.sh/hook: pre-install,pre-upgrade
          helm.sh/hook-weight: "-15"
          helm.sh/hook-delete-policy: before-hook-creation
      'hull-install':
        sources:
        - custom-installation-files-setup
        - _HULL_OBJECT_TYPE_DEFAULT_
        data:
          installation.yaml:
            inline: |-
                {{- with  (index $.Values "hull").config.general.data.installation }}
                  {{- $configScope := . -}}
                  {{- $configScopeEndpoints := dict -}}
                  {{- if hasKey . "endpoints" -}}
                      {{- $configScopeEndpoints = .endpoints -}}
                  {{- end -}}
                  {{- range $path, $_ := $.Files.Glob "files/hull-vidispine-addon/installation/endpoints/*.yaml" -}}
                      {{- $configScopeEndpoints = mergeOverwrite $configScopeEndpoints (dict (base $path | trimSuffix ".yaml") (fromYaml ($.Files.Get $path))) -}}
                  {{- end -}}
                  {{- range $endpoint, $endpointval := $configScopeEndpoints -}}
                      {{- $endpointScope := $endpointval -}}
                      {{- if $endpointval.endpoint -}}
                          {{- $subresources := dict -}}
                          {{- if hasKey $endpointval "subresources" -}}
                              {{- $subresources = $endpointval.subresources -}}
                          {{- end -}}
                          {{- range $path, $_ :=  $.Files.Glob (printf "%s/%s/%s" "files/hull-vidispine-addon/installation/endpoints" $endpoint "*.yaml") -}}
                              {{- $subresources = mergeOverwrite $subresources (dict (base $path | trimSuffix ".yaml") (fromYaml ($.Files.Get $path))) -}}
                          {{- end -}}
                          {{- range $subresource, $subresourceval := $subresources }}
                              {{- $subresourceScope := $subresourceval -}}
                              {{- $entities := dict  -}}
                              {{- if hasKey $subresourceval "entities" -}}
                                  {{- $entities = $subresourceval.entities -}}
                              {{- else -}}
                                {{- $u := set $subresourceval "entities" dict }}
                              {{- end -}}
                              {{- range $path, $_ :=  $.Files.Glob (printf "%s/%s/%s/%s" "files/hull-vidispine-addon/installation/endpoints" $endpoint $subresource "*.yaml") -}}
                                  {{- $entities = mergeOverwrite $entities (dict (base $path | trimSuffix ".yaml") (fromYaml ($.Files.Get $path))) -}}
                              {{- end -}}
                              {{- range $entity, $entityval := $entities }}
                                  {{- $mergedDict := dict -}}
                                  {{- if hasKey $subresourceval "_DEFAULTS_" -}}
                                      {{- $mergedDict = deepCopy $subresourceval._DEFAULTS_ -}}
                                  {{- end -}}
                                  {{- $t := mergeOverwrite $mergedDict $entityval -}}
                                  {{- $z := set (index $.Values "hull").config.general.data.installation "endpoints" $configScopeEndpoints }}
                                  {{- if typeIs "map[string]interface {}" $mergedDict -}}
                                      {{- if hasKey $mergedDict "config" -}}
                                          {{- $configDict := $mergedDict.config -}}
                                      {{- end }}
                                  {{- end }}
                                  {{- $t1 := set $subresourceval.entities $entity $mergedDict -}}
                              {{- end }}
                          {{- end }}
                      {{- else -}}
                          {{- $configScopeEndpoints = unset $configScopeEndpoints $endpoint -}}
                      {{- end }}
                  {{- end }}
                  {{- $_ := include "hull.util.transformation" (dict "PARENT_CONTEXT" $ "SOURCE" $configScope "CALLER" nil "CALLER_KEY" nil "SOURCE_PATH" list) -}}
                  {{- toYaml $configScope -}}
                {{ end }}
          Installer.ps1:
            enabled: _HT*hull.config.general.data.installation.config.debug.debugInstallerScript
            inline: |-
              *** ENABLE hull.config.general.data.installation.config.debug.debugInstallerScript
              *** AND COPY SCRIPT CODE FROM 
              *** /images/hull-integration/Installer.ps1 
              *** HERE TO START DEBUGGING 